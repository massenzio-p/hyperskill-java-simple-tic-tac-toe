type: edu
custom_name: Fight!
files:
  - name: src/tictactoe/Main.java
    visible: true
    text: |
      package tictactoe;
      
      public class Main {
          public static void main(String[] args) {
              // write your code here
          }
      }
    learner_created: false
  - name: test/TicTacToeTest.java
    visible: false
    text: |
      import org.hyperskill.hstest.exception.outcomes.WrongAnswer;
      import org.hyperskill.hstest.stage.StageTest;
      import org.hyperskill.hstest.testcase.CheckResult;
      import org.hyperskill.hstest.testcase.TestCase;
      
      import java.util.ArrayList;
      import java.util.Arrays;
      import java.util.List;
      import java.util.Random;
      import java.util.stream.Collectors;
      
      enum FieldState {
          X, O, FREE;
      
          static FieldState get(char symbol) {
              switch (symbol) {
                  case 'X':
                      return X;
                  case 'O':
                      return O;
                  case ' ':
                  case '_':
                      return FREE;
                  default:
                      return null;
              }
          }
      }
      
      class TicTacToeField {
      
          final FieldState[][] field;
      
          TicTacToeField(FieldState[][] field) {
              this.field = new FieldState[3][3];
              for (int row = 0; row < 3; row++) {
                  System.arraycopy(field[row], 0, this.field[row], 0, 3);
              }
          }
      
          TicTacToeField(String str) {
              field = new FieldState[3][3];
              for (int row = 0; row < 3; row++) {
                  for (int col = 0; col < 3; col++) {
                      field[row][col] = FieldState.get(str.charAt((row * 3 + col)));
                  }
              }
          }
      
          FieldState get(int x, int y) {
              return field[y - 1][x - 1];
          }
      
          boolean equalTo(TicTacToeField other) {
              for (int i = 0; i < 3; i++) {
                  for (int j = 0; j < 3; j++) {
                      if (field[i][j] != other.field[i][j]) {
                          return false;
                      }
                  }
              }
              return true;
          }
      
          boolean hasNextAs(TicTacToeField other) {
              boolean improved = false;
              for (int i = 0; i < 3; i++) {
                  for (int j = 0; j < 3; j++) {
                      if (field[i][j] != other.field[i][j]) {
                          if (field[i][j] == FieldState.FREE && !improved) {
                              improved = true;
                          } else {
                              return false;
                          }
                      }
                  }
              }
              return improved;
          }
      
          boolean isCloseTo(TicTacToeField other) {
              return equalTo(other)
                  || hasNextAs(other)
                  || other.hasNextAs(this);
          }
      
          boolean isWinning(FieldState side) {
              if (side == FieldState.FREE) {
                  return false;
              }
      
              if (get(1, 1) == side &&
                  get(1, 2) == side &&
                  get(1, 3) == side) {
                  return true;
              }
      
              if (get(2, 1) == side &&
                  get(2, 2) == side &&
                  get(2, 3) == side) {
                  return true;
              }
      
              if (get(3, 1) == side &&
                  get(3, 2) == side &&
                  get(3, 3) == side) {
                  return true;
              }
      
              if (get(1, 1) == side &&
                  get(2, 1) == side &&
                  get(3, 1) == side) {
                  return true;
              }
      
              if (get(1, 2) == side &&
                  get(2, 2) == side &&
                  get(3, 2) == side) {
                  return true;
              }
      
              if (get(1, 3) == side &&
                  get(2, 3) == side &&
                  get(3, 3) == side) {
                  return true;
              }
      
              if (get(1, 1) == side &&
                  get(2, 2) == side &&
                  get(3, 3) == side) {
                  return true;
              }
      
              if (get(1, 3) == side &&
                  get(2, 2) == side &&
                  get(3, 1) == side) {
                  return true;
              }
      
              return false;
          }
      
          boolean isDraw() {
              if (isWinning(FieldState.X) || isWinning(FieldState.O)) {
                  return false;
              }
              for (int x = 1; x <= 3; x++) {
                  for (int y = 1; y <= 3; y++) {
                      if (get(x, y) == FieldState.FREE) {
                          return false;
                      }
                  }
              }
              return true;
          }
      
          static TicTacToeField parse(String fieldStr) {
      
              try {
                  List<String> lines = fieldStr
                      .lines()
                      .map(String::strip)
                      .filter(e ->
                          e.startsWith("|")
                              && e.endsWith("|"))
                      .collect(Collectors.toList());
      
                  for (String line : lines) {
                      if (line.length() != 9) {
                          throw new WrongAnswer("Line of Tic-Tac-Toe " +
                              "field should be 9 characters long\n" +
                              "found " + line.length() + " characters in \"" + line + "\"");
                      }
                      for (char c : line.toCharArray()) {
                          if (c != 'X'
                              && c != 'O'
                              && c != '|'
                              && c != ' '
                              && c != '_') {
                              return null;
                          }
                      }
                  }
      
                  FieldState[][] field = new FieldState[3][3];
      
                  int y = 0;
                  for (String line : lines) {
                      char[] cols = new char[]{
                          line.charAt(2),
                          line.charAt(4),
                          line.charAt(6)
                      };
      
                      int x = 0;
                      for (char c : cols) {
                          FieldState state = FieldState.get(c);
                          if (state == null) {
                              return null;
                          }
                          field[y][x] = state;
                          x++;
                      }
                      y++;
                  }
      
                  TicTacToeField ticTacToeField = new TicTacToeField(field);
                  return ticTacToeField;
              } catch (Exception ex) {
                  return null;
              }
          }
      
      
          static List<TicTacToeField> parseAll(String output) {
              List<TicTacToeField> fields = new ArrayList<>();
      
              List<String> lines = output
                  .lines()
                  .map(String::strip)
                  .filter(e -> e.length() > 0)
                  .collect(Collectors.toList());
      
              String candidateField = "";
              boolean insideField = false;
              for (String line : lines) {
                  if (line.contains("----") && !insideField) {
                      insideField = true;
                      candidateField = "";
                  } else if (line.contains("----") && insideField) {
                      TicTacToeField field = TicTacToeField.parse(candidateField);
                      if (field != null) {
                          fields.add(field);
                      }
                      insideField = false;
                  }
      
                  if (insideField && line.startsWith("|")) {
                      candidateField += line + "\n";
                  }
              }
      
              return fields;
          }
      
          public int getXCount() {
      
              return (int) Arrays.stream(field)
                  .flatMap(Arrays::stream)
                  .filter(field -> field != null && field.equals(FieldState.X))
                  .count();
          }
      
          public int getOCount() {
              return (int) Arrays.stream(field)
                  .flatMap(Arrays::stream)
                  .filter(field -> field != null && field.equals(FieldState.O))
                  .count();
          }
      }
      
      
      class Clue {
          int x, y;
      
          Clue(int x, int y) {
              this.x = x;
              this.y = y;
          }
      }
      
      public class TicTacToeTest extends StageTest<Clue> {
      
          static String[] inputs = new String[]{
              "1 1", "1 2", "1 3",
              "2 1", "2 2", "2 3",
              "3 1", "3 2", "3 3"
          };
      
          String iterateCells(String initial) {
              int index = -1;
              for (int i = 0; i < inputs.length; i++) {
                  if (initial.equals(inputs[i])) {
                      index = i;
                      break;
                  }
              }
              if (index == -1) {
                  return "";
              }
              String fullInput = "";
              for (int i = index; i < index + 9; i++) {
                  fullInput += inputs[i % inputs.length] + "\n";
              }
              return fullInput;
          }
      
          @Override
          public List<TestCase<Clue>> generate() {
      
              List<TestCase<Clue>> tests = new ArrayList<>();
      
              int i = 0;
              for (String input : inputs) {
      
                  Random random = new Random();
                  String randomInput = "";
                  for (int j = 0; j < 10; j++) {
                      int randX = random.nextInt(4) + 1;
                      int randY = random.nextInt(4) + 1;
                      randomInput += randX + " " + randY + "\n";
                  }
      
                  String fullMoveInput = randomInput
                      + iterateCells(input) + iterateCells(input);
      
                  String[] strNums = input.split(" ");
                  int x = Integer.parseInt(strNums[0]);
                  int y = Integer.parseInt(strNums[1]);
      
                  if (i % 2 == 1) {
                      // mix with incorrect data
                      fullMoveInput = "4 " + i + "\n" + fullMoveInput;
                  }
      
                  String fullGameInput = "";
                  for (int j = 0; j < 9; j++) {
                      fullGameInput += fullMoveInput;
                  }
      
                  tests.add(new TestCase<Clue>()
                      .setInput(fullGameInput)
                      .setAttach(new Clue(x, y)));
      
                  i++;
              }
      
              return tests;
          }
      
          @Override
          public CheckResult check(String reply, Clue clue) {
      
              List<TicTacToeField> fields = TicTacToeField.parseAll(reply);
      
              if (fields.size() == 0) {
                  return new CheckResult(false, "No fields found");
              }
      
              for (int i = 1; i < fields.size(); i++) {
                  TicTacToeField curr = fields.get(i - 1);
                  TicTacToeField next = fields.get(i);
      
                  if (!(curr.equalTo(next) || curr.hasNextAs(next))) {
                      return new CheckResult(false,
                          "For two fields following each " +
                              "other one is not a continuation " +
                              "of the other (they differ more than in two places).");
                  }
      
                  if (Math.abs(curr.getXCount() - curr.getOCount()) > 1) {
                      return CheckResult.wrong("Wrong number of X's and O's in the field!");
                  }
              }
      
              List<String> lines = reply
                  .strip()
                  .lines()
                  .map(String::strip)
                  .filter(e -> e.length() > 0)
                  .collect(Collectors.toList());
      
              String lastLine = lines.get(lines.size() - 1);
      
              if (!(lastLine.contains("X wins")
                  || lastLine.contains("O wins")
                  || lastLine.contains("Draw")
              )) {
                  return new CheckResult(false,
                      "Can't parse final result, " +
                          "should contain \"Draw\", \"X wins\" or \"O wins\".\n" +
                          "Your last line: \"" + lastLine + "\"");
              }
      
              if (lastLine.contains("X wins") && lastLine.contains("O wins")) {
                  return new CheckResult(false,
                      "Your final result contains \"X wins\" and \"O wins\" " +
                          "at the same time. This is impossible.\n" +
                          "Your last line: \"" + lastLine + "\"");
              }
      
              if (lastLine.contains("X wins") && lastLine.contains("Draw")) {
                  return new CheckResult(false,
                      "Your final result contains \"X wins\" and \"Draw\" " +
                          "at the same time. This is impossible.\n" +
                          "Your last line: \"" + lastLine + "\"");
              }
      
              if (lastLine.contains("O wins") && lastLine.contains("Draw")) {
                  return new CheckResult(false,
                      "Your final result contains \"O wins\" and \"Draw\" " +
                          "at the same time. This is impossible.\n" +
                          "Your last line: \"" + lastLine + "\"");
              }
      
              TicTacToeField lastField = fields.get(fields.size() - 1);
      
              if (lastField.isWinning(FieldState.X) && !lastLine.contains("X wins")) {
                  return new CheckResult(false,
                      "Your last field shows that X wins, " +
                          "and your last line should contain \"X wins\".\n" +
                          "Your last line: \"" + lastLine + "\"");
              }
      
              if (lastField.isWinning(FieldState.O) && !lastLine.contains("O wins")) {
                  return new CheckResult(false,
                      "Your last field shows that O wins, " +
                          "and your last line should contain \"O wins\".\n" +
                          "Your last line: \"" + lastLine + "\"");
              }
      
              if (lastField.isDraw() && !lastLine.contains("Draw")) {
                  return new CheckResult(false,
                      "Your last field shows that there is a draw, " +
                          "and your last line should contain \"Draw\".\n" +
                          "Your last line: \"" + lastLine + "\"");
              }
      
              if (lastField.isWinning(FieldState.X) ||
                  lastField.isWinning(FieldState.O) ||
                  lastField.isDraw()) {
                  return CheckResult.correct();
              }
      
              return CheckResult.wrong(
                  "Your last field contains unfinished game, the game should be finished!"
              );
          }
      }
    learner_created: false
  - name: src/tictactoe/GameState.java
    visible: true
    text: |
      package tictactoe;
      
      public enum GameState {
          GAME_NOT_FINISHED, DRAW, X_WINS, O_WINS, IMPOSSIBLE
      }
    learner_created: true
  - name: src/tictactoe/GameAnalyzer.java
    visible: true
    text: |
      package tictactoe;
      
      public interface GameAnalyzer {
          GameState analyzeGameState(char[] gameSnapshot);
      }
    learner_created: true
  - name: src/tictactoe/Game.java
    visible: true
    text: |
      package tictactoe;
      
      public interface Game {
      
          void play();
      }
    learner_created: true
  - name: src/tictactoe/GameAnalyzerImpl.java
    visible: true
    text: |
      package tictactoe;
      
      import java.util.Set;
      
      public class GameAnalyzerImpl implements GameAnalyzer {
      
          private int numberOfX = 0;
          private int numberOfO = 0;
          private char[] gameSnapshot;
      
      
          @Override
          public GameState analyzeGameState(char[] gameSnapshot) {
              this.gameSnapshot = gameSnapshot;
              calculateMoves();
      
              if (checkIfImpossible(gameSnapshot)) {
                  return GameState.IMPOSSIBLE;
              }
      
              boolean xWins = determineIfOptionAWinner('X');
              boolean oWins = determineIfOptionAWinner('O');
      
              if (xWins && oWins) {
                  return GameState.IMPOSSIBLE;
              } else if (xWins) {
                  return GameState.X_WINS;
              } else if (oWins) {
                  return GameState.O_WINS;
              }
      
              if (numberOfX + numberOfO == gameSnapshot.length) {
                  return GameState.DRAW;
              }
              return GameState.GAME_NOT_FINISHED;
          }
      
          private boolean determineIfOptionAWinner(char option) {
              boolean winner = false;
              // column
              int battleSize = 3;
              for (int column = 0; column < battleSize; column++) {
                  for (int i = column; i < gameSnapshot.length; i += battleSize) {
                      if (gameSnapshot[i] == option) {
                          winner = true;
                      } else {
                          winner = false;
                          break;
                      }
                  }
                  if (winner) return true;
              }
              // rows
              for (int row = 0; row < battleSize; row++) {
                  for (int i = row; i < row + battleSize; i++) {
                      if (gameSnapshot[i] == option) {
                          winner = true;
                      } else {
                          winner = false;
                          break;
                      }
                  }
                  if (winner) return true;
              }
              // diagonal 1 "\"
              for (int col = 0; col < gameSnapshot.length; col += battleSize + battleSize / 2) {
                  if (gameSnapshot[col] == option) {
                      winner = true;
                  } else {
                      winner = false;
                      break;
                  }
              }
              if (winner) return true;
              // diagonal 2 "/"
              for (int idx = gameSnapshot.length - battleSize; idx > 0; idx -= battleSize - battleSize / 2) {
                  if (gameSnapshot[idx] == option) {
                      winner = true;
                  } else {
                      winner = false;
                      break;
                  }
              }
              if (winner) return true;
              return false;
          }
      
      
          private void calculateMoves() {
              this.numberOfX = 0;
              this.numberOfO = 0;
              for (var position : gameSnapshot) {
                  if (position == 'X') {
                      numberOfX++;
                  } else if (position == 'O') {
                      numberOfO++;
                  }
              }
          }
      
          private boolean checkIfImpossible(char[] gameSnapshot) {
              return Math.abs(numberOfX - numberOfO) > 1;
          }
      }
    learner_created: true
  - name: src/tictactoe/TicTacToeGame.java
    visible: true
    text: |
      package tictactoe;
      
      import java.io.PrintWriter;
      import java.util.Arrays;
      import java.util.Scanner;
      import java.util.StringTokenizer;
      import java.util.stream.Collectors;
      
      public class TicTacToeGame implements Game {
      
          private static final int BATTLEFIELD_SIZE = 3;
      
          private char[] battleFieldMatrix;
          private final PrintWriter writer;
          private final Scanner reader;
          private final GameAnalyzer gameAnalyzer;
      
          public TicTacToeGame(PrintWriter writer, Scanner reader, GameAnalyzer gameAnalyzer) {
              this.writer = writer;
              this.reader = reader;
              this.gameAnalyzer = gameAnalyzer;
          }
      
          @Override
          public void play() {
              String line = reader.nextLine();
              this.battleFieldMatrix = line.toCharArray();
      
              printTheField();
              acceptPlayerMove(reader, writer);
              printTheField();
      
      //        GameState state = this.gameAnalyzer.analyzeGameState(this.battleFieldMatrix);
      //        String stateMsg = mapStateToMessage(state);
      //        writer.println(stateMsg);
      //        writer.flush();
          }
      
          private void acceptPlayerMove(Scanner reader, PrintWriter writer) {
              StringTokenizer tokenizer;
              int[] move;
              while (true) {
                  try {
                      tokenizer = new StringTokenizer(reader.nextLine(), " ");
                      move = new int[] {
                              Integer.parseInt(tokenizer.nextToken()),
                              Integer.parseInt(tokenizer.nextToken())
                      };
                  } catch (NumberFormatException e) {
                      writer.println("You should enter numbers!");
                      writer.flush();
                      continue;
                  }
                  boolean outOfRange = false;
                  for (var coord : move) {
                      if (coord < 1 || coord > 3) {
                          outOfRange = true;
                          break;
                      }
                  }
                  if (outOfRange) {
                      writer.println("Coordinates should be from 1 to 3!");
                      writer.flush();
                      continue;
                  }
                  int actualIndex = (move[0] - 1) * BATTLEFIELD_SIZE + move[1] - 1;
                  if (this.battleFieldMatrix[actualIndex] != '_') {
                      writer.println("This cell is occupied! Choose another one!");
                      writer.flush();
                      continue;
                  } else {
                      this.battleFieldMatrix[actualIndex] = 'X';
                  }
                  return;
              }
          }
      
          private String mapStateToMessage(GameState state) {
              return switch (state) {
                  case O_WINS -> "O wins";
                  case X_WINS -> "X wins";
                  case IMPOSSIBLE -> "Impossible";
                  case DRAW -> "Draw";
                  case GAME_NOT_FINISHED -> "Game not finished";
              };
          }
      
          private void printTheField() {
              writer.println("---------");
              for (int i = 0, x = 0, y = 0; i < BATTLEFIELD_SIZE * BATTLEFIELD_SIZE; i++) {
                  if (x == 0) {
                      writer.print("| ");
                  }
                  if (this.battleFieldMatrix[i] == '_') {
                      writer.print(" ");
                  } else {
                      writer.print(this.battleFieldMatrix[i]);
                  }
                  writer.print(' ');
                  if (x++ == BATTLEFIELD_SIZE - 1) {
                      writer.println("|");
                      x = 0;
                      y++;
                  }
              }
              writer.println("---------");
              writer.flush();
          }
      }
    learner_created: true
feedback_link: https://hyperskill.org/learn/step/5401#comment
status: Solved
feedback:
  message: Well done! You've finished the project. Select a new project on <a href="https://hyperskill.org/projects">Hyperskill</a>
    to continue learning.
  time: "Mon, 05 Feb 2024 15:33:00 UTC"
record: -1
