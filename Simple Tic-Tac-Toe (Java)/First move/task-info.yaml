type: edu
custom_name: First move!
files:
  - name: src/tictactoe/Main.java
    visible: true
    text: |
      package tictactoe;
      
      public class Main {
          public static void main(String[] args) {
              // write your code here
          }
      }
    learner_created: false
  - name: test/TicTacToeTest.java
    visible: false
    text: |
      import org.hyperskill.hstest.exception.outcomes.WrongAnswer;
      import org.hyperskill.hstest.stage.StageTest;
      import org.hyperskill.hstest.testcase.CheckResult;
      import org.hyperskill.hstest.testcase.TestCase;
      
      import java.util.ArrayList;
      import java.util.List;
      import java.util.stream.Collectors;
      
      enum FieldState {
          X, O, FREE;
      
          static FieldState get(char symbol) {
              switch (symbol) {
                  case 'X': return X;
                  case 'O': return O;
                  case ' ':
                  case '_':
                      return FREE;
                  default: return null;
              }
          }
      }
      
      class TicTacToeField {
      
          final FieldState[][] field;
      
          TicTacToeField(FieldState[][] field) {
              this.field = new FieldState[3][3];
              for (int row = 0; row < 3; row++) {
                  System.arraycopy(field[row], 0, this.field[row], 0, 3);
              }
          }
      
          TicTacToeField(String str) {
              field = new FieldState[3][3];
              for (int row = 0; row < 3; row++) {
                  for (int col = 0; col < 3; col++) {
                      field[row][col] = FieldState.get(str.charAt(row * 3 + col));
                  }
              }
          }
      
          boolean equalTo(TicTacToeField other) {
              for (int i = 0; i < 3; i++) {
                  for (int j = 0; j < 3; j++) {
                      if (field[i][j] != other.field[i][j]) {
                          return false;
                      }
                  }
              }
              return true;
          }
      
          boolean hasNextAs(TicTacToeField other) {
              boolean improved = false;
              for (int i = 0; i < 3; i++) {
                  for (int j = 0; j < 3; j++) {
                      if (field[i][j] != other.field[i][j]) {
                          if (field[i][j] == FieldState.FREE && !improved) {
                              improved = true;
                          }
                          else {
                              return false;
                          }
                      }
                  }
              }
              return improved;
          }
      
          boolean isCloseTo(TicTacToeField other) {
              return equalTo(other)
                  || hasNextAs(other)
                  || other.hasNextAs(this);
          }
      
          static TicTacToeField parse(String fieldStr) {
      
              try {
                  List<String> lines = fieldStr
                      .lines()
                      .map(String::strip)
                      .filter(e ->
                          e.startsWith("|")
                              && e.endsWith("|"))
                      .collect(Collectors.toList());
      
                  for (String line : lines) {
                      if (line.length() != 9) {
                          throw new WrongAnswer("Line of Tic-Tac-Toe " +
                              "field should be 9 characters long\n" +
                              "found " + line.length() + " characters in \"" + line + "\"");
                      }
                      for (char c : line.toCharArray()) {
                          if (c != 'X'
                              && c != 'O'
                              && c != '|'
                              && c != ' '
                              && c != '_') {
                              return null;
                          }
                      }
                  }
      
                  FieldState[][] field = new FieldState[3][3];
      
                  int y = 0;
                  for (String line : lines) {
                      char[] cols = new char[] {
                          line.charAt(2),
                          line.charAt(4),
                          line.charAt(6)
                      };
      
                      int x = 0;
                      for (char c : cols) {
                          FieldState state = FieldState.get(c);
                          if (state == null) {
                              return null;
                          }
                          field[y][x] = state;
                          x++;
                      }
                      y++;
                  }
      
                  return new TicTacToeField(field);
              } catch (Exception ex) {
                  return null;
              }
          }
      
      
          static List<TicTacToeField> parseAll(String output) {
              List<TicTacToeField> fields = new ArrayList<>();
      
              List<String> lines = output
                  .lines()
                  .map(String::strip)
                  .filter(e -> e.length() > 0)
                  .collect(Collectors.toList());
      
              String candidateField = "";
              boolean insideField = false;
              for (String line : lines) {
                  if (line.contains("----") && !insideField) {
                      insideField = true;
                      candidateField = "";
                  } else if (line.contains("----") && insideField) {
                      TicTacToeField field = TicTacToeField.parse(candidateField);
                      if (field != null) {
                          fields.add(field);
                      }
                      insideField = false;
                  }
      
                  if (insideField && line.startsWith("|")) {
                      candidateField += line + "\n";
                  }
              }
      
              return fields;
          }
      
      }
      
      
      class Clue {
          int x, y;
          String input;
          Clue(String input, int x, int y) {
              this.input = input;
              this.x = x;
              this.y = y;
          }
      }
      
      public class TicTacToeTest extends StageTest<Clue> {
      
          static final String[] inputs = new String[] {
              "1 1", "1 2", "1 3",
              "2 1", "2 2", "2 3",
              "3 1", "3 2", "3 3"
          };
      
          String iterateCells(String initial) {
              int index = -1;
              for (int i = 0; i < inputs.length; i++) {
                  if (initial.equals(inputs[i])) {
                      index = i;
                      break;
                  }
              }
              if (index == -1) {
                  return "";
              }
              String fullInput = "";
              for (int i = index; i < index + 9; i++) {
                  fullInput += inputs[i % inputs.length] + "\n";
              }
              return fullInput;
          }
      
          @Override
          public List<TestCase<Clue>> generate() {
      
              List<TestCase<Clue>> tests = new ArrayList<>();
      
              int i = 0;
      
              for (String startField : new String[] {
                  "_XXOO_OX_",
                  "_________",
                  "X_X_O____"
              }) {
      
                  for (String input : inputs) {
                      String fullInput = iterateCells(input);
      
                      String[] strNums = input.split("\\s+");
                      int x = Integer.parseInt(strNums[0]);
                      int y = Integer.parseInt(strNums[1]);
      
                      if (i % 2 == 1) {
                          // mix with incorrect data
                          fullInput = "4 " + i + "\n" + fullInput;
                      }
      
                      tests.add(new TestCase<Clue>()
                          .setInput(startField + "\n" + fullInput)
                          .setAttach(new Clue(startField, x, y)));
      
                      i++;
                  }
      
              }
      
              return tests;
          }
      
          @Override
          public CheckResult check(String reply, Clue clue) {
      
              List<TicTacToeField> fields = TicTacToeField.parseAll(reply);
      
              if (fields.size() != 2) {
                  return new CheckResult(false,
                      "Can't find two fields inside output");
              }
      
              TicTacToeField curr = fields.get(0);
              TicTacToeField next = fields.get(1);
      
              TicTacToeField correctCurr = new TicTacToeField(clue.input);
              TicTacToeField correctNext = new TicTacToeField(correctCurr.field);
      
              String[] numInputs = iterateCells(clue.x + " " + clue.y).split("\n");
              for (String input : numInputs) {
                  String[] strNums = input.split(" ");
                  int x = Integer.parseInt(strNums[0]);
                  int y = Integer.parseInt(strNums[1]);
                  if (correctNext.field[x - 1][y - 1] == FieldState.FREE) {
                      correctNext.field[x - 1][y - 1] = FieldState.X;
                      break;
                  }
              }
      
              if (!curr.equalTo(correctCurr)) {
                  return new CheckResult(false,
                      "The first field is not equal to the input field");
              }
      
              if (!next.equalTo(correctNext)) {
                  return new CheckResult(false,
                      "The first field is correct, but the second is not");
              }
      
              return CheckResult.correct();
          }
      }
    learner_created: false
  - name: src/tictactoe/GameState.java
    visible: true
    text: |
      package tictactoe;
      
      public enum GameState {
          GAME_NOT_FINISHED, DRAW, X_WINS, O_WINS, IMPOSSIBLE
      }
    learner_created: true
  - name: src/tictactoe/GameAnalyzer.java
    visible: true
    text: |
      package tictactoe;
      
      public interface GameAnalyzer {
          GameState analyzeGameState(char[] gameSnapshot);
      }
    learner_created: true
  - name: src/tictactoe/Game.java
    visible: true
    text: |
      package tictactoe;
      
      public interface Game {
      
          void play();
      }
    learner_created: true
  - name: src/tictactoe/GameAnalyzerImpl.java
    visible: true
    text: |
      package tictactoe;
      
      import java.util.Set;
      
      public class GameAnalyzerImpl implements GameAnalyzer {
      
          private int numberOfX = 0;
          private int numberOfO = 0;
          private char[] gameSnapshot;
      
      
          @Override
          public GameState analyzeGameState(char[] gameSnapshot) {
              this.gameSnapshot = gameSnapshot;
              calculateMoves();
      
              if (checkIfImpossible(gameSnapshot)) {
                  return GameState.IMPOSSIBLE;
              }
      
              boolean xWins = determineIfOptionAWinner('X');
              boolean oWins = determineIfOptionAWinner('O');
      
              if (xWins && oWins) {
                  return GameState.IMPOSSIBLE;
              } else if (xWins) {
                  return GameState.X_WINS;
              } else if (oWins) {
                  return GameState.O_WINS;
              }
      
              if (numberOfX + numberOfO == gameSnapshot.length) {
                  return GameState.DRAW;
              }
              return GameState.GAME_NOT_FINISHED;
          }
      
          private boolean determineIfOptionAWinner(char option) {
              boolean winner = false;
              // column
              int battleSize = 3;
              for (int column = 0; column < battleSize; column++) {
                  for (int i = column; i < gameSnapshot.length; i += battleSize) {
                      if (gameSnapshot[i] == option) {
                          winner = true;
                      } else {
                          winner = false;
                          break;
                      }
                  }
                  if (winner) return true;
              }
              // rows
              for (int row = 0; row < battleSize; row++) {
                  for (int i = row; i < row + battleSize; i++) {
                      if (gameSnapshot[i] == option) {
                          winner = true;
                      } else {
                          winner = false;
                          break;
                      }
                  }
                  if (winner) return true;
              }
              // diagonal 1 "\"
              for (int col = 0; col < gameSnapshot.length; col += battleSize + battleSize / 2) {
                  if (gameSnapshot[col] == option) {
                      winner = true;
                  } else {
                      winner = false;
                      break;
                  }
              }
              if (winner) return true;
              // diagonal 2 "/"
              for (int idx = gameSnapshot.length - battleSize; idx > 0; idx -= battleSize - battleSize / 2) {
                  if (gameSnapshot[idx] == option) {
                      winner = true;
                  } else {
                      winner = false;
                      break;
                  }
              }
              if (winner) return true;
              return false;
          }
      
      
          private void calculateMoves() {
              this.numberOfX = 0;
              this.numberOfO = 0;
              for (var position : gameSnapshot) {
                  if (position == 'X') {
                      numberOfX++;
                  } else if (position == 'O') {
                      numberOfO++;
                  }
              }
          }
      
          private boolean checkIfImpossible(char[] gameSnapshot) {
              return Math.abs(numberOfX - numberOfO) > 1;
          }
      }
    learner_created: true
  - name: src/tictactoe/TicTacToeGame.java
    visible: true
    text: |
      package tictactoe;
      
      import java.io.PrintWriter;
      import java.util.Arrays;
      import java.util.Scanner;
      
      public class TicTacToeGame implements Game {
      
          private static final int BATTLEFIELD_SIZE = 3;
      
          private char[] battleFieldMatrix;
          private final PrintWriter writer;
          private final Scanner reader;
          private final GameAnalyzer gameAnalyzer;
      
          public TicTacToeGame(PrintWriter writer, Scanner reader, GameAnalyzer gameAnalyzer) {
              this.writer = writer;
              this.reader = reader;
              this.gameAnalyzer = gameAnalyzer;
          }
      
          @Override
          public void play() {
              String line = reader.nextLine();
              this.battleFieldMatrix = line.toCharArray();
      
              printTheField();
              GameState state = this.gameAnalyzer.analyzeGameState(this.battleFieldMatrix);
              String stateMsg = mapStateToMessage(state);
              writer.println(stateMsg);
              writer.flush();
          }
      
          private String mapStateToMessage(GameState state) {
              return switch (state) {
                  case O_WINS -> "O wins";
                  case X_WINS -> "X wins";
                  case IMPOSSIBLE -> "Impossible";
                  case DRAW -> "Draw";
                  case GAME_NOT_FINISHED -> "Game not finished";
              };
          }
      
          private void printTheField() {
              writer.println("---------");
              for (int i = 0, x = 0, y = 0; i < BATTLEFIELD_SIZE * BATTLEFIELD_SIZE; i++) {
                  if (x == 0) {
                      writer.print("| ");
                  }
                  writer.print(this.battleFieldMatrix[i]);
                  writer.print(' ');
                  if (x++ == BATTLEFIELD_SIZE - 1) {
                      writer.println("|");
                      x = 0;
                      y++;
                  }
              }
              writer.println("---------");
              writer.flush();
          }
      }
    learner_created: true
feedback_link: https://hyperskill.org/learn/step/5400#comment
status: Solved
feedback:
  message: Congratulations!
  time: "Mon, 05 Feb 2024 12:48:05 UTC"
record: 4
